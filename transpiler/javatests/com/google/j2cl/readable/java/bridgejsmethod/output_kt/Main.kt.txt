// Generated from "bridgejsmethod/Main.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "REPEATED_BOUND",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER")

package bridgejsmethod

import javaemul.lang.*
import jsinterop.annotations.JsMethod
import jsinterop.annotations.JsType
import kotlin.Any
import kotlin.Int
import kotlin.Number
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName("J2ktBridgejsmethodMain", exact = true)
open class Main {
 @ObjCName("J2ktBridgejsmethodMainCompanion", exact = true)
 companion object {
  @JvmStatic
  @ObjCName("test")
  fun test() {
   val a: Main.A<Any?>? = Main.A<Int?>() as Main.A<Any?>?
   a!!.`fun`(Int.valueOf(1))
   a!!.bar(Int.valueOf(1))
   val b: Main.B? = Main.B()
   b!!.`fun`("abc")
   b!!.bar("abc")
   val c: Main.C? = Main.C()
   c!!.`fun`(Int.valueOf(1) as Int?)
   c!!.bar(Int.valueOf(1))
   val d: Main.D? = Main.D()
   d!!.`fun`(Int.valueOf(1) as Int?)
   d!!.bar(Int.valueOf(1))
   val e: Main.E? = Main.E()
   e!!.`fun`("abc")
   e!!.bar("abc")
   val h: Main.H<Int?>? = Main.H<Int?>()
   h!!.enclose(Int.valueOf(1))
   val l: Main.L<Int?>? = Main.L<Int?>()
   l!!.fun_pp_bridgejsmethod("foo", Int.valueOf(1))
  }
 }

 @ObjCName("J2ktBridgejsmethodMain_A", exact = true)
 open class A<T> {
  @ObjCName("fun")
  @JsMethod
  open fun `fun`(
   @ObjCName("withId") t: T
  ): T {
   return t
  }

  @ObjCName("bar")
  open fun bar(
   @ObjCName("withId") t: T
  ) {}
 }

 @ObjCName("J2ktBridgejsmethodMain_I", exact = true)
 fun interface I<T: Number?> {
  @ObjCName("fun")
  @JsMethod(name = "mNumber")
  fun `fun`(
   @ObjCName("withNSNumber") t: T
  ): T
 }

 @ObjCName("J2ktBridgejsmethodMain_J", exact = true)
 fun interface J<T> {
  @ObjCName("bar")
  fun bar(
   @ObjCName("withId") t: T
  )
 }

 @ObjCName("J2ktBridgejsmethodMain_B", exact = true)
 open class B: Main.A<String?>() {
  open override fun `fun`(s: String?): String? {
   return s
  }

  @JsMethod
  open override fun bar(s: String?) {}
 }

 @ObjCName("J2ktBridgejsmethodMain_C", exact = true)
 open class C: Main.A<Int?>() {
  open override fun `fun`(i: Int?): Int? {
   return i
  }
 }

 @ObjCName("J2ktBridgejsmethodMain_D", exact = true)
 open class D: Main.A<Int?>(), Main.I<Int?> {
  open override fun `fun`(i: Int?): Int? {
   return i
  }
 }

 @ObjCName("J2ktBridgejsmethodMain_E", exact = true)
 open class E: Main.B(), Main.J<String?> {}

 @ObjCName("J2ktBridgejsmethodMain_F", exact = true)
 open class F: Main.A<Int?>(), Main.I<Int?> {}

 @ObjCName("J2ktBridgejsmethodMain_G", exact = true)
 fun interface G<V> {
  @ObjCName("enclose")
  fun enclose(
   @ObjCName("withId") value: V
  ): V
 }

 @ObjCName("J2ktBridgejsmethodMain_H", exact = true)
 open class H<V>: Main.G<V> {
  @JsMethod
  open override fun enclose(value: V): V {
   return null as V
  }
 }

 @ObjCName("J2ktBridgejsmethodMain_K", exact = true)
 open class K<K1, K2> {
  internal open fun fun_pp_bridgejsmethod(k1: K1, k2: K2) {}
 }

 @ObjCName("J2ktBridgejsmethodMain_L", exact = true)
 open class L<L1>: Main.K<String?, L1>() {
  @JsMethod(name = "fun")
  open override fun fun_pp_bridgejsmethod(string: String?, l1: L1) {}
 }

 fun interface M {
  @ObjCName("getB")
  fun getB(): Main.B?
 }

 @JsType
 abstract inner class N constructor(): Main.M {
  abstract override fun getB(): Main.B?
 }

 open inner class O internal constructor(): Main.N() {
  @JvmField
  internal var b_private_3: Main.B? = null

  open override fun getB(): Main.B? {
   return this.b_private_3
  }
 }

 fun interface P {
  @ObjCName("getKey")
  fun getKey(): String?
 }

 @JsType
 abstract inner class Q internal constructor(): Main.P {
  abstract override fun getKey(): String?
 }

 @JsType
 abstract inner class R internal constructor(): Main.Q() {
  open override fun getKey(): String? {
   return null
  }
 }

 open inner class S internal constructor(): Main.R() {}

 open inner class GrandParent<T> internal constructor() {
  @ObjCName("jsMethod")
  @JsMethod
  open fun jsMethod(
   @ObjCName("withId") t: T
  ) {}

  @ObjCName("method")
  open fun method(
   @ObjCName("withId") t: T
  ) {}
 }

 open inner class Parent<T: Main.Parent<*>?> internal constructor(): Main.GrandParent<T>() {
  open override fun jsMethod(t: T) {}

  open override fun method(t: T) {}
 }

 open inner class ChildWithoutOverrides internal constructor(): Main.Parent<Main.ChildWithoutOverrides?>() {}

 open inner class ChildWithOverrides<T: Main.ChildWithOverrides<T>?> internal constructor(): Main.Parent<T>() {
  open override fun jsMethod(t: T) {}

  open override fun method(t: T) {}
 }

 open inner class ChildWithRenamedOverride internal constructor(): Main.GrandParent<Main.ChildWithRenamedOverride?>() {
  @JsMethod(name = "renamedJsMethod")
  open override fun jsMethod(t: Main.ChildWithRenamedOverride?) {}
 }
}
