[Main] => [Main]
[Main] => [constructor]
[Main] => [super();] "jsenum.Main.<synthetic: ctor_js>"
[Main] => [$create__]
[Main] => [Main.$clinit();] "jsenum.Main.<synthetic: ctor_create>"
[Main] => [let $instance = new Main();] "jsenum.Main.<synthetic: ctor_create>"
[Main] => [$instance.$ctor__jsenum_Main__void();] "jsenum.Main.<synthetic: ctor_create>"
[Main] => [return $instance;] "jsenum.Main.<synthetic: ctor_create>"
[Main] => [$ctor__jsenum_Main__void]
[Main] => [this.$ctor__java_lang_Object__void();] "jsenum.Main.<init>"
[testJsEnumSwitch] => [m_testJsEnumSwitch__void]
[{
    ComparableJsEnum comparableJsEnum =
...    acceptsSupplierOfSupplier(() -> (() -> ComparableJsEnum.ONE));
  }] => [Main.$clinit();] "jsenum.Main.testJsEnumSwitch"
[ComparableJsEnum comparableJsEnum =
        ComparableJsEnum.ONE.getValue() == 1 ? ComparableJsEnum.TWO : null;] => [let comparableJsEnum = $Overlay.m_getValue__$devirt__jsenum_Main_ComparableJsEnum__int(ComparableJsEnum.ONE) == 1 ? ComparableJsEnum.TWO : /**@type {?ComparableJsEnum}*/ ($Enums.unbox(null, $Overlay));] "jsenum.Main.testJsEnumSwitch"
[comparableJsEnum] => [comparableJsEnum] "comparableJsEnum"
[switch (comparableJsEnum) {
      case TWO:
...      default:
    }] => [switch ((InternalPreconditions.m_checkNotNull__boolean__void(!$Equality.$same(comparableJsEnum, null)), comparableJsEnum)) {
   case ComparableJsEnum.TWO:
...   default:
  }] "jsenum.Main.testJsEnumSwitch"
[break;] => [break;] "jsenum.Main.testJsEnumSwitch"
[Comparable comparable = comparableJsEnum;] => [let comparable = /**@type {$Enums_BoxedComparableLightEnum<?ComparableJsEnum>}*/ ($Enums.boxComparable(comparableJsEnum, $Overlay));] "jsenum.Main.testJsEnumSwitch"
[comparable] => [comparable] "comparable"
[comparableJsEnum = (ComparableJsEnum) comparable;] => [comparableJsEnum = /**@type {?ComparableJsEnum}*/ ($Enums.unbox(comparable, $Overlay));] "jsenum.Main.testJsEnumSwitch"
[IntJsEnum intJsEnum = IntJsEnum.ELEVEN.getValue() == 10 ? IntJsEnum.ELEVEN : null;] => [let intJsEnum = IntJsEnum_$Overlay.m_getValue__$devirt__jsenum_Main_IntJsEnum__int(IntJsEnum.ELEVEN) == 10 ? IntJsEnum.ELEVEN : /**@type {?IntJsEnum}*/ ($Enums.unbox(null, IntJsEnum_$Overlay));] "jsenum.Main.testJsEnumSwitch"
[intJsEnum] => [intJsEnum] "intJsEnum"
[switch (intJsEnum) {
      case TWENTY:
...      default:
    }] => [switch ((InternalPreconditions.m_checkNotNull__boolean__void(!$Equality.$same(intJsEnum, null)), intJsEnum)) {
   case IntJsEnum.TWENTY:
...   default:
  }] "jsenum.Main.testJsEnumSwitch"
[break;] => [break;] "jsenum.Main.testJsEnumSwitch"
[Object o = intJsEnum;] => [let o = /**@type {$Enums_BoxedLightEnum<?IntJsEnum>}*/ ($Enums.box(intJsEnum, IntJsEnum_$Overlay));] "jsenum.Main.testJsEnumSwitch"
[o] => [o] "o"
[intJsEnum = (IntJsEnum) o;] => [intJsEnum = /**@type {?IntJsEnum}*/ ($Enums.unbox(o, IntJsEnum_$Overlay));] "jsenum.Main.testJsEnumSwitch"
[boolean equal = intJsEnum == IntJsEnum.TWENTY;] => [let equal = $Equality.$same(intJsEnum, IntJsEnum.TWENTY);] "jsenum.Main.testJsEnumSwitch"
[equal] => [equal] "equal"
[boolean isInstance = intJsEnum instanceof IntJsEnum;] => [let isInstance = !$Equality.$same(intJsEnum, null);] "jsenum.Main.testJsEnumSwitch"
[isInstance] => [isInstance] "isInstance"
[isInstance = intJsEnum instanceof Comparable;] => [isInstance = Comparable.$isInstance(/**@type {$Enums_BoxedLightEnum<?IntJsEnum>}*/ ($Enums.box(intJsEnum, IntJsEnum_$Overlay)));] "jsenum.Main.testJsEnumSwitch"
[StringJsEnum stringJsEnum = StringJsEnum.ONE.getValue() == "10" ? StringJsEnum.THREE : null;] => [let stringJsEnum = $Equality.$same(StringJsEnum_$Overlay.m_getValue__$devirt__jsenum_Main_StringJsEnum__java_lang_String(StringJsEnum.ONE), '10') ? StringJsEnum.THREE : /**@type {?StringJsEnum}*/ ($Enums.unbox(null, StringJsEnum_$Overlay));] "jsenum.Main.testJsEnumSwitch"
[stringJsEnum] => [stringJsEnum] "stringJsEnum"
[switch (stringJsEnum) {
      case ONE:
...      default:
    }] => [switch ((InternalPreconditions.m_checkNotNull__boolean__void(!$Equality.$same(stringJsEnum, null)), stringJsEnum)) {
   case StringJsEnum.ONE:
...   default:
  }] "jsenum.Main.testJsEnumSwitch"
[break;] => [break;] "jsenum.Main.testJsEnumSwitch"
[NativeStringEnum.ONE.compareTo(NativeStringEnum.THREE);] => [$Comparables.m_compareTo__java_lang_Comparable__java_lang_Object__int(NativeStringEnum.ONE, NativeStringEnum.THREE);] "jsenum.Main.testJsEnumSwitch"
[NativeStringEnum.ONE.equals(NativeStringEnum.THREE);] => [$Objects.m_equals__java_lang_Object__java_lang_Object__boolean(NativeStringEnum.ONE, NativeStringEnum.THREE);] "jsenum.Main.testJsEnumSwitch"
[Supplier<ComparableJsEnum> supplier = () -> ComparableJsEnum.ONE;] => [let supplier = Supplier.$adapt(() =>{
   return /**@type {$Enums_BoxedComparableLightEnum<!ComparableJsEnum>}*/ ($Enums.boxComparable(ComparableJsEnum.ONE, $Overlay));
  });] "jsenum.Main.testJsEnumSwitch"
[supplier] => [supplier] "supplier"
[ComparableJsEnum.ONE] => [return /**@type {$Enums_BoxedComparableLightEnum<!ComparableJsEnum>}*/ ($Enums.boxComparable(ComparableJsEnum.ONE, $Overlay));] "jsenum.Main.<lambda in testJsEnumSwitch>"
[Consumer<ComparableJsEnum> consummer = e -> e.ordinal();] => [let consummer = Consumer.$adapt((e) =>{
   let e_1 = /**@type {?ComparableJsEnum}*/ ($Enums.unbox(e, $Overlay));
  });] "jsenum.Main.testJsEnumSwitch"
[consummer] => [consummer] "consummer"
[e] => [e] "e"
[e -> e.ordinal()] => [let e_1 = /**@type {?ComparableJsEnum}*/ ($Enums.unbox(e, $Overlay));] "jsenum.Main.<lambda in testJsEnumSwitch>"
[e] => [e_1] "e"
[acceptsJsFunctionSupplier(() -> ComparableJsEnum.ONE);] => [Main.m_acceptsJsFunctionSupplier__jsenum_Main_JsFunctionSuppiler__void(() =>{
   return /**@type {$Enums_BoxedComparableLightEnum<!ComparableJsEnum>}*/ ($Enums.boxComparable(ComparableJsEnum.ONE, $Overlay));
  });] "jsenum.Main.testJsEnumSwitch"
[ComparableJsEnum.ONE] => [return /**@type {$Enums_BoxedComparableLightEnum<!ComparableJsEnum>}*/ ($Enums.boxComparable(ComparableJsEnum.ONE, $Overlay));] "jsenum.Main.<lambda in testJsEnumSwitch>"
[acceptsSupplierOfSupplier(() -> (() -> ComparableJsEnum.ONE));] => [Main.m_acceptsSupplierOfSupplier__jsenum_Main_Supplier__void(Supplier.$adapt(() =>{
   return Supplier.$adapt(() =>{
...   });
  }));] "jsenum.Main.testJsEnumSwitch"
[(() -> ComparableJsEnum.ONE)] => [return Supplier.$adapt(() =>{
    return /**@type {$Enums_BoxedComparableLightEnum<!ComparableJsEnum>}*/ ($Enums.boxComparable(ComparableJsEnum.ONE, $Overlay));
   });] "jsenum.Main.<lambda in testJsEnumSwitch>"
[ComparableJsEnum.ONE] => [return /**@type {$Enums_BoxedComparableLightEnum<!ComparableJsEnum>}*/ ($Enums.boxComparable(ComparableJsEnum.ONE, $Overlay));] "jsenum.Main.<lambda in testJsEnumSwitch>"
[testJsEnumAutoboxingSpecialMethods] => [m_testJsEnumAutoboxingSpecialMethods__void]
[StringJsEnum stringJsEnum = StringJsEnum.ONE;] => [let stringJsEnum = StringJsEnum.ONE;] "jsenum.Main.testJsEnumAutoboxingSpecialMethods"
[stringJsEnum] => [stringJsEnum] "stringJsEnum"
[StringJsEnum nullStringJsEnum = null;] => [let nullStringJsEnum = /**@type {?StringJsEnum}*/ ($Enums.unbox(null, StringJsEnum_$Overlay));] "jsenum.Main.testJsEnumAutoboxingSpecialMethods"
[nullStringJsEnum] => [nullStringJsEnum] "nullStringJsEnum"
[ComparableJsEnum jsEnum = ComparableJsEnum.ONE;] => [let jsEnum = ComparableJsEnum.ONE;] "jsenum.Main.testJsEnumAutoboxingSpecialMethods"
[jsEnum] => [jsEnum] "jsEnum"
[ComparableJsEnum nullJsEnum = null;] => [let nullJsEnum = /**@type {?ComparableJsEnum}*/ ($Enums.unbox(null, $Overlay));] "jsenum.Main.testJsEnumAutoboxingSpecialMethods"
[nullJsEnum] => [nullJsEnum] "nullJsEnum"
[Object o = ComparableJsEnum.ONE;] => [let o = /**@type {$Enums_BoxedComparableLightEnum<!ComparableJsEnum>}*/ ($Enums.boxComparable(ComparableJsEnum.ONE, $Overlay));] "jsenum.Main.testJsEnumAutoboxingSpecialMethods"
[o] => [o] "o"
[StringJsEnum.ONE.equals(StringJsEnum.THREE);] => [$Enums.equals(StringJsEnum.ONE, StringJsEnum.THREE);] "jsenum.Main.testJsEnumAutoboxingSpecialMethods"
[StringJsEnum.ONE.equals(stringJsEnum);] => [$Enums.equals(StringJsEnum.ONE, stringJsEnum);] "jsenum.Main.testJsEnumAutoboxingSpecialMethods"
[StringJsEnum.ONE.equals(nullStringJsEnum);] => [$Enums.equals(StringJsEnum.ONE, nullStringJsEnum);] "jsenum.Main.testJsEnumAutoboxingSpecialMethods"
[StringJsEnum.ONE.equals(null);] => [$Objects.m_equals__java_lang_Object__java_lang_Object__boolean(/**@type {$Enums_BoxedLightEnum<!StringJsEnum>}*/ ($Enums.box(StringJsEnum.ONE, StringJsEnum_$Overlay)), null);] "jsenum.Main.testJsEnumAutoboxingSpecialMethods"
[StringJsEnum.ONE.equals(o);] => [$Objects.m_equals__java_lang_Object__java_lang_Object__boolean(/**@type {$Enums_BoxedLightEnum<!StringJsEnum>}*/ ($Enums.box(StringJsEnum.ONE, StringJsEnum_$Overlay)), o);] "jsenum.Main.testJsEnumAutoboxingSpecialMethods"
[o.equals(StringJsEnum.THREE);] => [$Objects.m_equals__java_lang_Object__java_lang_Object__boolean(o, /**@type {$Enums_BoxedLightEnum<!StringJsEnum>}*/ ($Enums.box(StringJsEnum.THREE, StringJsEnum_$Overlay)));] "jsenum.Main.testJsEnumAutoboxingSpecialMethods"
[ComparableJsEnum.ONE.compareTo(ComparableJsEnum.ZERO);] => [$Enums.compareTo(ComparableJsEnum.ONE, ComparableJsEnum.ZERO);] "jsenum.Main.testJsEnumAutoboxingSpecialMethods"
[ComparableJsEnum.ONE.compareTo(null);] => [$Comparables.m_compareTo__java_lang_Comparable__java_lang_Object__int(/**@type {$Enums_BoxedComparableLightEnum<!ComparableJsEnum>}*/ ($Enums.boxComparable(ComparableJsEnum.ONE, $Overlay)), null);] "jsenum.Main.testJsEnumAutoboxingSpecialMethods"
[ComparableJsEnum.ONE.equals(ComparableJsEnum.ZERO);] => [$Enums.equals(ComparableJsEnum.ONE, ComparableJsEnum.ZERO);] "jsenum.Main.testJsEnumAutoboxingSpecialMethods"
[ComparableJsEnum.ONE.equals(jsEnum);] => [$Enums.equals(ComparableJsEnum.ONE, jsEnum);] "jsenum.Main.testJsEnumAutoboxingSpecialMethods"
[ComparableJsEnum.ONE.equals(nullJsEnum);] => [$Enums.equals(ComparableJsEnum.ONE, nullJsEnum);] "jsenum.Main.testJsEnumAutoboxingSpecialMethods"
[ComparableJsEnum.ONE.equals(null);] => [$Objects.m_equals__java_lang_Object__java_lang_Object__boolean(/**@type {$Enums_BoxedComparableLightEnum<!ComparableJsEnum>}*/ ($Enums.boxComparable(ComparableJsEnum.ONE, $Overlay)), null);] "jsenum.Main.testJsEnumAutoboxingSpecialMethods"
[ComparableJsEnum.ONE.equals(o);] => [$Objects.m_equals__java_lang_Object__java_lang_Object__boolean(/**@type {$Enums_BoxedComparableLightEnum<!ComparableJsEnum>}*/ ($Enums.boxComparable(ComparableJsEnum.ONE, $Overlay)), o);] "jsenum.Main.testJsEnumAutoboxingSpecialMethods"
[o.equals(ComparableJsEnum.ZERO);] => [$Objects.m_equals__java_lang_Object__java_lang_Object__boolean(o, /**@type {$Enums_BoxedComparableLightEnum<!ComparableJsEnum>}*/ ($Enums.boxComparable(ComparableJsEnum.ZERO, $Overlay)));] "jsenum.Main.testJsEnumAutoboxingSpecialMethods"
[StringJsEnum.ONE.equals(jsEnum);] => [$Objects.m_equals__java_lang_Object__java_lang_Object__boolean(/**@type {$Enums_BoxedLightEnum<!StringJsEnum>}*/ ($Enums.box(StringJsEnum.ONE, StringJsEnum_$Overlay)), /**@type {$Enums_BoxedComparableLightEnum<?ComparableJsEnum>}*/ ($Enums.boxComparable(jsEnum, $Overlay)));] "jsenum.Main.testJsEnumAutoboxingSpecialMethods"
[boxingPassthrough(ComparableJsEnum.ONE).equals(boxingPassthrough(ComparableJsEnum.ONE));] => [$Enums.equals(/**@type {?ComparableJsEnum}*/ ($Enums.unbox(Main.m_boxingPassthrough__java_lang_Object__java_lang_Object(/**@type {$Enums_BoxedComparableLightEnum<!ComparableJsEnum>}*/ ($Enums.boxComparable(ComparableJsEnum.ONE, $Overlay))), $Overlay)), /**@type {?ComparableJsEnum}*/ ($Enums.unbox(Main.m_boxingPassthrough__java_lang_Object__java_lang_Object(/**@type {$Enums_BoxedComparableLightEnum<!ComparableJsEnum>}*/ ($Enums.boxComparable(ComparableJsEnum.ONE, $Overlay))), $Overlay)));] "jsenum.Main.testJsEnumAutoboxingSpecialMethods"
[boxingPassthrough(ComparableJsEnum.ONE).equals(boxingPassthrough(StringJsEnum.ONE));] => [$Objects.m_equals__java_lang_Object__java_lang_Object__boolean(/**@type {$Enums_BoxedComparableLightEnum<?ComparableJsEnum>}*/ ($Enums.boxComparable(/**@type {?ComparableJsEnum}*/ ($Enums.unbox(Main.m_boxingPassthrough__java_lang_Object__java_lang_Object(/**@type {$Enums_BoxedComparableLightEnum<!ComparableJsEnum>}*/ ($Enums.boxComparable(ComparableJsEnum.ONE, $Overlay))), $Overlay)), $Overlay)), /**@type {$Enums_BoxedLightEnum<?StringJsEnum>}*/ ($Enums.box(/**@type {?StringJsEnum}*/ ($Enums.unbox(Main.m_boxingPassthrough__java_lang_Object__java_lang_Object(/**@type {$Enums_BoxedLightEnum<!StringJsEnum>}*/ ($Enums.box(StringJsEnum.ONE, StringJsEnum_$Overlay))), StringJsEnum_$Overlay)), StringJsEnum_$Overlay)));] "jsenum.Main.testJsEnumAutoboxingSpecialMethods"
[acceptsJsFunctionSupplier] => [m_acceptsJsFunctionSupplier__jsenum_Main_JsFunctionSuppiler__void]
[supplier] => [supplier] "supplier"
[acceptsSupplierOfSupplier] => [m_acceptsSupplierOfSupplier__jsenum_Main_Supplier__void]
[supplier] => [supplier] "supplier"
[testReturnsAndParameters] => [m_testReturnsAndParameters__void]
[ComparableJsEnum returnedValue = returnsJsEnum();] => [let returnedValue = Main.m_returnsJsEnum__jsenum_Main_ComparableJsEnum();] "jsenum.Main.testReturnsAndParameters"
[returnedValue] => [returnedValue] "returnedValue"
[ComparableJsEnum returnedNullValue = returnsNullJsEnum();] => [let returnedNullValue = Main.m_returnsNullJsEnum__jsenum_Main_ComparableJsEnum();] "jsenum.Main.testReturnsAndParameters"
[returnedNullValue] => [returnedNullValue] "returnedNullValue"
[takesJsEnum(ComparableJsEnum.ONE);] => [Main.m_takesJsEnum__jsenum_Main_ComparableJsEnum__void(ComparableJsEnum.ONE);] "jsenum.Main.testReturnsAndParameters"
[returnsJsEnum] => [m_returnsJsEnum__jsenum_Main_ComparableJsEnum]
[return ComparableJsEnum.ONE;] => [return ComparableJsEnum.ONE;] "jsenum.Main.returnsJsEnum"
[returnsNullJsEnum] => [m_returnsNullJsEnum__jsenum_Main_ComparableJsEnum]
[return null;] => [return /**@type {?ComparableJsEnum}*/ ($Enums.unbox(null, $Overlay));] "jsenum.Main.returnsNullJsEnum"
[takesJsEnum] => [m_takesJsEnum__jsenum_Main_ComparableJsEnum__void]
[value] => [value] "value"
[testBoxUnboxWithTypeInference] => [m_testBoxUnboxWithTypeInference__void]
[TemplatedField<ComparableJsEnum> templatedField =
        new TemplatedField<ComparableJsEnum>(ComparableJsEnum.ONE);] => [let templatedField = /**@type {!TemplatedField<$Enums_BoxedComparableLightEnum<?ComparableJsEnum>>}*/ (TemplatedField.$create__java_lang_Object(/**@type {$Enums_BoxedComparableLightEnum<!ComparableJsEnum>}*/ ($Enums.boxComparable(ComparableJsEnum.ONE, $Overlay))));] "jsenum.Main.testBoxUnboxWithTypeInference"
[templatedField] => [templatedField] "templatedField"
[ComparableJsEnum unboxed = templatedField.getValue();] => [let unboxed = /**@type {?ComparableJsEnum}*/ ($Enums.unbox(templatedField.m_getValue__java_lang_Object_$pp_jsenum(), $Overlay));] "jsenum.Main.testBoxUnboxWithTypeInference"
[unboxed] => [unboxed] "unboxed"
[unboxed = templatedField.value;] => [unboxed = /**@type {?ComparableJsEnum}*/ ($Enums.unbox(templatedField.f_value__jsenum_Main_TemplatedField, $Overlay));] "jsenum.Main.testBoxUnboxWithTypeInference"
[templatedField.value = ComparableJsEnum.ONE;] => [templatedField.f_value__jsenum_Main_TemplatedField = /**@type {$Enums_BoxedComparableLightEnum<!ComparableJsEnum>}*/ ($Enums.boxComparable(ComparableJsEnum.ONE, $Overlay));] "jsenum.Main.testBoxUnboxWithTypeInference"
[Arrays.asList(ComparableJsEnum.ONE);] => [Arrays.m_asList__arrayOf_java_lang_Object__java_util_List([/**@type {$Enums_BoxedComparableLightEnum<!ComparableJsEnum>}*/ ($Enums.boxComparable(ComparableJsEnum.ONE, $Overlay))]);] "jsenum.Main.testBoxUnboxWithTypeInference"
[templatedField.getValue().ordinal();] => [$Enums.unbox(templatedField.m_getValue__java_lang_Object_$pp_jsenum(), $Overlay);] "jsenum.Main.testBoxUnboxWithTypeInference"
[boolean b = ComparableJsEnum.ONE == boxingPassthrough(ComparableJsEnum.ONE);] => [let b = $Equality.$same(/**@type {$Enums_BoxedComparableLightEnum<!ComparableJsEnum>}*/ ($Enums.boxComparable(ComparableJsEnum.ONE, $Overlay)), Main.m_boxingPassthrough__java_lang_Object__java_lang_Object(/**@type {$Enums_BoxedComparableLightEnum<!ComparableJsEnum>}*/ ($Enums.boxComparable(ComparableJsEnum.ONE, $Overlay))));] "jsenum.Main.testBoxUnboxWithTypeInference"
[b] => [b] "b"
[boxingPassthrough] => [m_boxingPassthrough__java_lang_Object__java_lang_Object]
[t] => [t] "t"
[return t;] => [return t;] "jsenum.Main.boxingPassthrough"
[boxingWithGenerics] => [m_boxingWithGenerics__void]
[{
    new Foo<>(Optional.of(IntJsEnum.MINUSONE));
  }] => [Main.$clinit();] "jsenum.Main.boxingWithGenerics"
[new Foo<>(Optional.of(IntJsEnum.MINUSONE));] => [Foo.$create__java_util_Optional(/**@type {Optional<$Enums_BoxedLightEnum<?IntJsEnum>>}*/ (Optional.m_of__java_lang_Object__java_util_Optional(/**@type {$Enums_BoxedLightEnum<!IntJsEnum>}*/ ($Enums.box(IntJsEnum.MINUSONE, IntJsEnum_$Overlay)))));] "jsenum.Main.boxingWithGenerics"
[Main] => [$clinit]
[Main] => [Main.$clinit = () =>{};] "jsenum.Main.<clinit>"
[Main] => [Main.$loadModules();] "jsenum.Main.<clinit>"
[Main] => [j_l_Object.$clinit();] "jsenum.Main.<clinit>"
